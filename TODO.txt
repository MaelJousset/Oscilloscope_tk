En début de  seance
===================
1) Copier le repertoire du sujet de labos :
  - /home/TP/modules/sujets/CAI/TkInter/Labos/
chez vous en le renommant Dupond_Dupont_TkInter (si vos noms sont Dupond, Dupont):
--> cp -r /home/TP/modules/sujets/CAI/TkInter/Labos/ $HOME/chemin_acces_repertoire_CAI/Dupond_Dupont_TkInter

2) Tester les applications :
--> python simulators.py
--> python main.py

La première application illustre le calcul et la visualisation de mouvements vibratoire harmoniques,
d'équation (1), d'équation différentielle de Lotka-Volterra (2) et d'une suite logistique (3).

La deuxième application propose une IHM pour contrôler un mouvement vibratoire harmonique.

Objectifs
=========
L'objectifs de ce labo est de réaliser une IHM de simulation de signaux :

 1) d'oscilloscope (equations de mouvement vibratoire harmonique)
 2) d'évolution de population proies-prédateurs  (equations de Lotka-Volterra)
 3) dynamique de population  (equation logistique, modèle de verhulst)
 4) ...

en mettant en oeuvre le développement d'IHM basé sur le patron de conception MVC.
Le modèle pouvant être un des signaux ci-dessus.
Dans un premier temps on implémentera un simulateur d'oscilloscope.


Archivage
=========
A partir du repertoire : $HOME/chemin_acces_repertoire_CAI/Dupond_Dupont_TkInter
Se déplacer sur le repertoire parent :
--> cd ..
Creer une archive Dupond_Dupont_TkInter.tgz du repertoire Dupond_Dupont_TkInter/ :
--> tar zcvf Dupond_Dupont_TkInter.tgz Dupond_Dupont_TkInter/
Deposer cette archive sous le repertoire de rendu de travail  : 
--> cp Dupond_Dupont_TkInter.tgz /home/TP/TPrendu/nedelec/CAI/TkInter

Attention
---------
VERIFIER que l'archive n'est pas vide et qu'elle contient les fichiers de l'application : 
--> tar ztvf Dupond_Dupont_TkInter.tgz

Cette archive devra contenir les fichiers :
  - controls.py   : la classe  Controller du modèle MVC
  - generator.py  : la classe  Generator du modèle MVC
  - main.py       : l'application à lancer (le point d'entrée pour tester votre travail)
  - observer.py   : les classes Observer et Subject du  modèle Observer
  - simulators.py : les types de signaux à manipuler dans une IHM
  - screen.py     : la classe Screen du modèle MVC
  - Tests         : des programmes de test pour votre application
  - TODO.txt      : ce fichier en cours de lecture !
  - utils.py      : des utilitaires pour votre application


Premiere version : paramétrage d'un signal
==========================================

Affichage et contrôle d'un signal ("X") dans l'application  :
 1) décomposer la classe Generator initiale de l'application principale (main.py) suivant le modèle MVC :
      - Modèle : classe Generator (generator.py)
      - Vue  : classe Screen  (screen.py)
      - Controleur : classe Controller (controls.py)
 2) contrôler le signal, par des sliders (Scale), en amplitude, frequence et phase
 3) contrôler le nombre d'harmoniques du signal par un slider 
 4) contrôler les harmoniques paires, impaires par des boutons à comportement radio  (Radiobutton)
 5) agencer les contrôleurs du signal dans un conteneur (Frame, LabelFrame ...)
 6) réagencer automatiquement les composants graphiques en cas de retaillage de la fenetre
 7) configurer l'IHM (couleur,texte, positionnement des sliders ...) par un fichier d'options
 8) mettre an place une animation d'un spot correspondant a l'elongation (after())
 9) inserer dans l'IHM la possibilite de parametrer le nombre d'échantillons sur la courbe du signal)
 
Deuxieme version : Gestion de barre de Menu 
===========================================
Dans cette version on ajoutera deux  menus sur l'on retrouve classiquement dans les IHM :
1) Help :
   - About Us : informations (messagebox,filedialog  ...) avec (Nom,Prénom, e-mail)  des concepteurs de l'application
   - About Tk : informations (messagebox,filedialog  ...) pour l'API utilisée pour développer l'IHM
   - About Python : informations (messagebox,filedialog  ...) sur le langage utilisé pour développer l'IHM

2) File :
   - Exit : sortie d'application
      a) sans avertir l'utilisateur (exit())
      b) avec boite de dialogue (messagebox,filedialog  ...) 
   - Open : chargement des parametres de signaux
      a) chargement d'un nom de fichier fixé par defaut dans l'application (json.load())
      b) en utilisant une boite de dialogue pour sélectionner le nom de fichier (filedialog ...) 
   - Save : sauvegarde des parametres de signaux
      a) dans un nom de fichier fixé par defaut dans l'application (json.dump())
      b) en utilisant une boite de dialogue pour sélectionner le nom de fichier (filedialog ...}) 
   - Save Image (PIL) : sauvegarde de l'affichage (Canvas) dans un fichier (format png, jpg ...)
      a) dans un nom de fichier fixé par defaut dans l'application
      b) en utilisant une boite de dialogue pour sélectionner le répertoire et le nom de fihier
 
Troisieme version : Gestion de plusieurs signaux 
================================================
Faire évoluer l'application précedente afin de contrôler plusieurs signaux
 1) gestion d'un deuxième signal ("Y") dans la même vue
 2) gestion d'affichage en "X-Y" dans une fenêtre secondaire 
 3) gestion d'affichage d'animation de spots sur les courbes "X","Y" et "X-Y"

Reutilisation
=============
Reprendre la même IHM en l'adaptant aux autres modeles (Lotka-Volterra, suite logistique...)


